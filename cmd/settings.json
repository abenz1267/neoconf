[
  {
    "name": "aleph",
    "desc": "ASCII code of the letter Aleph (Hebrew)",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "arabic",
    "desc": "Arabic as a default second language",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "arabicshape",
    "desc": "do shaping for Arabic characters",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "allowrevins",
    "desc": "allow CTRL-_ in Insert and Command-line mode",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "ambiwidth",
    "desc": "what to do with Unicode chars of ambiguous width",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "autochdir",
    "desc": "change directory to the file in the current window",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "autoindent",
    "desc": "take indent for new line from previous line",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "autoread",
    "desc": "autom. read file when changed outside of Vim",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "autowrite",
    "desc": "automatically write file if changed",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "autowriteall",
    "desc": "as 'autowrite', but works with more commands",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "background",
    "desc": "\\",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "backspace",
    "desc": "how backspace works at start of line",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "backup",
    "desc": "keep backup file after overwriting a file",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "backupcopy",
    "desc": "make backup as a copy, don't rename the file",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "backupdir",
    "desc": "list of directories for the backup file",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "backupext",
    "desc": "extension used for the backup file",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "backupskip",
    "desc": "no backup for files that match these patterns",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "belloff",
    "desc": "do not ring the bell for these reasons",
    "type": "string",
    "list": "comma",
    "scope": "global"
  },
  {
    "name": "binary",
    "desc": "read/write/edit file in binary mode",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "bomb",
    "desc": "a Byte Order Mark to the file",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "breakat",
    "desc": "characters that may cause a line break",
    "type": "string",
    "list": "flags",
    "scope": "global"
  },
  {
    "name": "breakindent",
    "desc": "wrapped line repeats indent",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "breakindentopt",
    "desc": "settings for 'breakindent'",
    "type": "string",
    "list": "onecomma",
    "scope": "window"
  },
  {
    "name": "browsedir",
    "desc": "which directory to start browsing in",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "bufhidden",
    "desc": "what to do when buffer is no longer in window",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "buflisted",
    "desc": "whether the buffer shows up in the buffer list",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "buftype",
    "desc": "special type of buffer",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "casemap",
    "desc": "specifies how case of letters is changed",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "cdpath",
    "desc": "list of directories searched with \\",
    "type": "string",
    "list": "comma",
    "scope": "global"
  },
  {
    "name": "cedit",
    "desc": "used to open the command-line window",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "channel",
    "desc": "Channel connected to the buffer",
    "type": "number",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "charconvert",
    "desc": "expression for character encoding conversion",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "cindent",
    "desc": "do C program indenting",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "cinkeys",
    "desc": "keys that trigger indent when 'cindent' is set",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "cinoptions",
    "desc": "how to do indenting when 'cindent' is set",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "cinwords",
    "desc": "words where 'si' and 'cin' add an indent",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "clipboard",
    "desc": "use the clipboard as the unnamed register",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "cmdheight",
    "desc": "number of lines to use for the command-line",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "cmdwinheight",
    "desc": "height of the command-line window",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "colorcolumn",
    "desc": "columns to highlight",
    "type": "string",
    "list": "onecomma",
    "scope": "window"
  },
  {
    "name": "columns",
    "desc": "number of columns in the display",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "comments",
    "desc": "patterns that can start a comment line",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "commentstring",
    "desc": "template for comments; used for fold marker",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "compatible",
    "desc": "No description",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "complete",
    "desc": "specify how Insert mode completion works",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "concealcursor",
    "desc": "whether concealable text is hidden in cursor line",
    "type": "string",
    "list": "",
    "scope": "window"
  },
  {
    "name": "conceallevel",
    "desc": "whether concealable text is shown or hidden",
    "type": "number",
    "list": "",
    "scope": "window"
  },
  {
    "name": "completefunc",
    "desc": "function to be used for Insert mode completion",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "completeopt",
    "desc": "options for Insert mode completion",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "completeslash",
    "desc": "",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "confirm",
    "desc": "ask what to do about unsaved/read-only files",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "copyindent",
    "desc": "make 'autoindent' use existing indent structure",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "cpoptions",
    "desc": "flags for Vi-compatible behavior",
    "type": "string",
    "list": "flags",
    "scope": "global"
  },
  {
    "name": "cscopepathcomp",
    "desc": "how many components of the path to show",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "cscopeprg",
    "desc": "command to execute cscope",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "cscopequickfix",
    "desc": "use quickfix window for cscope results",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "cscoperelative",
    "desc": "Use cscope.out path basename as prefix",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "cscopetag",
    "desc": "use cscope for tag commands",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "cscopetagorder",
    "desc": "determines \\",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "cscopeverbose",
    "desc": "give messages when adding a cscope database",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "cursorbind",
    "desc": "move cursor in window as it moves in other windows",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "cursorcolumn",
    "desc": "highlight the screen column of the cursor",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "cursorline",
    "desc": "highlight the screen line of the cursor",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "debug",
    "desc": "to \\",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "define",
    "desc": "pattern to be used to find a macro definition",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "delcombine",
    "desc": "delete combining characters on their own",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "dictionary",
    "desc": "list of file names used for keyword completion",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "diff",
    "desc": "diff mode for the current window",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "diffexpr",
    "desc": "expression used to obtain a diff file",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "diffopt",
    "desc": "options for using diff mode",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "digraph",
    "desc": "enable the entering of digraphs in Insert mode",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "directory",
    "desc": "list of directory names for the swap file",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "display",
    "desc": "list of flags for how to display text",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "eadirection",
    "desc": "in which direction 'equalalways' works",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "edcompatible",
    "desc": "No description",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "emoji",
    "desc": "No description",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "encoding",
    "desc": "encoding used internally",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "endofline",
    "desc": "write \u003cEOL\u003e for last line in file",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "equalalways",
    "desc": "windows are automatically made the same size",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "equalprg",
    "desc": "external program to use for \\",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "errorbells",
    "desc": "ring the bell for error messages",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "errorfile",
    "desc": "name of the errorfile for the QuickFix mode",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "errorformat",
    "desc": "description of the lines in the error file",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "eventignore",
    "desc": "autocommand events that are ignored",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "expandtab",
    "desc": "use spaces when \u003cTab\u003e is inserted",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "exrc",
    "desc": "read .nvimrc and .exrc in the current directory",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "fileencoding",
    "desc": "file encoding for multi-byte text",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "fileencodings",
    "desc": "automatically detected character encodings",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "fileformat",
    "desc": "file format used for file I/O",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "fileformats",
    "desc": "automatically detected values for 'fileformat'",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "fileignorecase",
    "desc": "ignore case when using file names",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "filetype",
    "desc": "type of file, used for autocommands",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "fillchars",
    "desc": "characters to use for displaying special items",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "fixendofline",
    "desc": "make sure last line in file has \u003cEOL\u003e",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "foldclose",
    "desc": "close a fold when the cursor leaves it",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "foldcolumn",
    "desc": "width of the column used to indicate folds",
    "type": "string",
    "list": "",
    "scope": "window"
  },
  {
    "name": "foldenable",
    "desc": "set to display all folds open",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "foldexpr",
    "desc": "expression used when 'foldmethod' is \\",
    "type": "string",
    "list": "",
    "scope": "window"
  },
  {
    "name": "foldignore",
    "desc": "ignore lines when 'foldmethod' is \\",
    "type": "string",
    "list": "",
    "scope": "window"
  },
  {
    "name": "foldlevel",
    "desc": "close folds with a level higher than this",
    "type": "number",
    "list": "",
    "scope": "window"
  },
  {
    "name": "foldlevelstart",
    "desc": "'foldlevel' when starting to edit a file",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "foldmarker",
    "desc": "markers used when 'foldmethod' is \\",
    "type": "string",
    "list": "onecomma",
    "scope": "window"
  },
  {
    "name": "foldmethod",
    "desc": "folding type",
    "type": "string",
    "list": "",
    "scope": "window"
  },
  {
    "name": "foldminlines",
    "desc": "minimum number of lines for a fold to be closed",
    "type": "number",
    "list": "",
    "scope": "window"
  },
  {
    "name": "foldnestmax",
    "desc": "maximum fold depth",
    "type": "number",
    "list": "",
    "scope": "window"
  },
  {
    "name": "foldopen",
    "desc": "for which commands a fold will be opened",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "foldtext",
    "desc": "expression used to display for a closed fold",
    "type": "string",
    "list": "",
    "scope": "window"
  },
  {
    "name": "formatexpr",
    "desc": "expression used with \\",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "formatoptions",
    "desc": "how automatic formatting is to be done",
    "type": "string",
    "list": "flags",
    "scope": "buffer"
  },
  {
    "name": "formatlistpat",
    "desc": "pattern used to recognize a list header",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "formatprg",
    "desc": "name of external program used with \\",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "fsync",
    "desc": "whether to invoke fsync() after file write",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "gdefault",
    "desc": "the \\",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "grepformat",
    "desc": "format of 'grepprg' output",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "grepprg",
    "desc": "program to use for \\",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "guicursor",
    "desc": "GUI: settings for cursor shape and blinking",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "guifont",
    "desc": "GUI: Name(s) of font(s) to be used",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "guifontwide",
    "desc": "list of font names for double-wide characters",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "guioptions",
    "desc": "GUI: Which components and options are used",
    "type": "string",
    "list": "flags",
    "scope": "global"
  },
  {
    "name": "guitablabel",
    "desc": "GUI: custom label for a tab page",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "guitabtooltip",
    "desc": "GUI: custom tooltip for a tab page",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "helpfile",
    "desc": "full path name of the main help file",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "helpheight",
    "desc": "minimum height of a new help window",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "helplang",
    "desc": "preferred help languages",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "hidden",
    "desc": "don't unload buffer when it is |abandon|ed",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "highlight",
    "desc": "sets highlighting mode for various occasions",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "history",
    "desc": "number of command-lines that are remembered",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "hkmap",
    "desc": "Hebrew keyboard mapping",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "hkmapp",
    "desc": "phonetic Hebrew keyboard mapping",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "hlsearch",
    "desc": "highlight matches with last search pattern",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "icon",
    "desc": "Vim set the text of the window icon",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "iconstring",
    "desc": "to use for the Vim icon text",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "ignorecase",
    "desc": "ignore case in search patterns",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "imcmdline",
    "desc": "use IM when starting to edit a command line",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "imdisable",
    "desc": "do not use the IM in any mode",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "iminsert",
    "desc": "use :lmap or IM in Insert mode",
    "type": "number",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "imsearch",
    "desc": "use :lmap or IM when typing a search pattern",
    "type": "number",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "inccommand",
    "desc": "Live preview of substitution",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "include",
    "desc": "pattern to be used to find an include file",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "includeexpr",
    "desc": "expression used to process an include line",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "incsearch",
    "desc": "highlight match while typing search pattern",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "indentexpr",
    "desc": "expression used to obtain the indent of a line",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "indentkeys",
    "desc": "keys that trigger indenting with 'indentexpr'",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "infercase",
    "desc": "adjust case of match for keyword completion",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "insertmode",
    "desc": "start the edit of a file in Insert mode",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "isfname",
    "desc": "characters included in file names and pathnames",
    "type": "string",
    "list": "comma",
    "scope": "global"
  },
  {
    "name": "isident",
    "desc": "characters included in identifiers",
    "type": "string",
    "list": "comma",
    "scope": "global"
  },
  {
    "name": "iskeyword",
    "desc": "characters included in keywords",
    "type": "string",
    "list": "comma",
    "scope": "buffer"
  },
  {
    "name": "isprint",
    "desc": "printable characters",
    "type": "string",
    "list": "comma",
    "scope": "global"
  },
  {
    "name": "joinspaces",
    "desc": "two spaces after a period with a join command",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "jumpoptions",
    "desc": "Controls the behavior of the jumplist",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "keymap",
    "desc": "name of a keyboard mapping",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "keymodel",
    "desc": "enable starting/stopping selection with keys",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "keywordprg",
    "desc": "program to use for the \\",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "langmap",
    "desc": "alphabetic characters for other language mode",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "langmenu",
    "desc": "language to be used for the menus",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "langnoremap",
    "desc": "do not apply 'langmap' to mapped characters",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "langremap",
    "desc": "No description",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "laststatus",
    "desc": "tells when last window has status lines",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "lazyredraw",
    "desc": "don't redraw while executing macros",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "linebreak",
    "desc": "wrap long lines at a blank",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "lines",
    "desc": "of lines in the display",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "linespace",
    "desc": "number of pixel lines to use between characters",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "lisp",
    "desc": "indenting for Lisp",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "lispwords",
    "desc": "words that change how lisp indenting works",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "list",
    "desc": "\u003cTab\u003e and \u003cEOL\u003e",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "listchars",
    "desc": "characters for displaying in list mode",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "loadplugins",
    "desc": "load plugin scripts when starting up",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "magic",
    "desc": "special characters in search patterns",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "makeef",
    "desc": "name of the errorfile for \\",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "makeencoding",
    "desc": "Converts the output of external commands",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "makeprg",
    "desc": "program to use for the \\",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "matchpairs",
    "desc": "pairs of characters that \\",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "matchtime",
    "desc": "tenths of a second to show matching paren",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "maxcombine",
    "desc": "maximum nr of combining characters displayed",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "maxfuncdepth",
    "desc": "maximum recursive depth for user functions",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "maxmapdepth",
    "desc": "maximum recursive depth for mapping",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "maxmempattern",
    "desc": "maximum memory (in Kbyte) used for pattern search",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "menuitems",
    "desc": "maximum number of items in a menu",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "mkspellmem",
    "desc": "memory used before |:mkspell| compresses the tree",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "modeline",
    "desc": "recognize modelines at start or end of file",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "modelineexpr",
    "desc": "allow some options to be set in modeline",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "modelines",
    "desc": "number of lines checked for modelines",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "modifiable",
    "desc": "changes to the text are not possible",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "modified",
    "desc": "buffer has been modified",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "more",
    "desc": "listings when the whole screen is filled",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "mouse",
    "desc": "the use of mouse clicks",
    "type": "string",
    "list": "flags",
    "scope": "global"
  },
  {
    "name": "mousefocus",
    "desc": "keyboard focus follows the mouse",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "mousehide",
    "desc": "hide mouse pointer while typing",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "mousemodel",
    "desc": "changes meaning of mouse buttons",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "mouseshape",
    "desc": "shape of the mouse pointer in different modes",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "mousetime",
    "desc": "max time between mouse double-click",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "nrformats",
    "desc": "number formats recognized for CTRL-A command",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "number",
    "desc": "print the line number in front of each line",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "numberwidth",
    "desc": "number of columns used for the line number",
    "type": "number",
    "list": "",
    "scope": "window"
  },
  {
    "name": "omnifunc",
    "desc": "function for filetype-specific completion",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "opendevice",
    "desc": "allow reading/writing devices on MS-Windows",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "operatorfunc",
    "desc": "function to be called for |g@| operator",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "packpath",
    "desc": "list of directories used for packages",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "paragraphs",
    "desc": "nroff macros that separate paragraphs",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "paste",
    "desc": "pasting text",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "pastetoggle",
    "desc": "key code that causes 'paste' to toggle",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "patchexpr",
    "desc": "expression used to patch a file",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "patchmode",
    "desc": "keep the oldest version of a file",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "path",
    "desc": "list of directories searched with \\",
    "type": "string",
    "list": "comma",
    "scope": "global"
  },
  {
    "name": "preserveindent",
    "desc": "preserve the indent structure when reindenting",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "previewheight",
    "desc": "height of the preview window",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "previewwindow",
    "desc": "identifies the preview window",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "printdevice",
    "desc": "name of the printer to be used for :hardcopy",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "printencoding",
    "desc": "encoding to be used for printing",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "printexpr",
    "desc": "expression used to print PostScript for :hardcopy",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "printfont",
    "desc": "name of the font to be used for :hardcopy",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "printheader",
    "desc": "format of the header used for :hardcopy",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "printmbcharset",
    "desc": "CJK character set to be used for :hardcopy",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "printmbfont",
    "desc": "font names to be used for CJK output of :hardcopy",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "printoptions",
    "desc": "controls the format of :hardcopy output",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "prompt",
    "desc": "enable prompt in Ex mode",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "pumblend",
    "desc": "Controls transparency level of popup menu",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "pumheight",
    "desc": "maximum height of the popup menu",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "pumwidth",
    "desc": "minimum width of the popup menu",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "pyxversion",
    "desc": "selects default python version to use",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "quoteescape",
    "desc": "escape characters used in a string",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "readonly",
    "desc": "disallow writing the buffer",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "redrawdebug",
    "desc": "Changes the way redrawing works (debug)",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "redrawtime",
    "desc": "timeout for 'hlsearch' and |:match| highlighting",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "regexpengine",
    "desc": "default regexp engine to use",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "relativenumber",
    "desc": "show relative line number in front of each line",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "remap",
    "desc": "mappings to work recursively",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "report",
    "desc": "for reporting nr. of lines changed",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "revins",
    "desc": "inserting characters will work backwards",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "rightleft",
    "desc": "window is right-to-left oriented",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "rightleftcmd",
    "desc": "commands for which editing works right-to-left",
    "type": "string",
    "list": "",
    "scope": "window"
  },
  {
    "name": "ruler",
    "desc": "show cursor line and column in the status line",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "rulerformat",
    "desc": "custom format for the ruler",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "runtimepath",
    "desc": "list of directories used for runtime files",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "scroll",
    "desc": "lines to scroll with CTRL-U and CTRL-D",
    "type": "number",
    "list": "",
    "scope": "window"
  },
  {
    "name": "scrollback",
    "desc": "lines to scroll with CTRL-U and CTRL-D",
    "type": "number",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "scrollbind",
    "desc": "scroll in window as other windows scroll",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "scrolljump",
    "desc": "minimum number of lines to scroll",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "scrolloff",
    "desc": "minimum nr. of lines above and below cursor",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "scrollopt",
    "desc": "how 'scrollbind' should behave",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "sections",
    "desc": "nroff macros that separate sections",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "secure",
    "desc": "mode for reading .vimrc in current dir",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "selection",
    "desc": "what type of selection to use",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "selectmode",
    "desc": "when to use Select mode instead of Visual mode",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "sessionoptions",
    "desc": "options for |:mksession|",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "shada",
    "desc": "use .shada file upon startup and exiting",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "shadafile",
    "desc": "overrides the filename used for shada",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "shell",
    "desc": "name of shell to use for external commands",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "shellcmdflag",
    "desc": "flag to shell to execute one command",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "shellpipe",
    "desc": "string to put output of \\",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "shellquote",
    "desc": "quote character(s) for around shell command",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "shellredir",
    "desc": "string to put output of filter in a temp file",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "shellslash",
    "desc": "use forward slash for shell file names",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "shelltemp",
    "desc": "whether to use a temp file for shell commands",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "shellxquote",
    "desc": "like 'shellquote', but include redirection",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "shellxescape",
    "desc": "characters to escape when 'shellxquote' is (",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "shiftround",
    "desc": "round indent to multiple of shiftwidth",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "shiftwidth",
    "desc": "number of spaces to use for (auto)indent step",
    "type": "number",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "shortmess",
    "desc": "list of flags, reduce length of messages",
    "type": "string",
    "list": "flags",
    "scope": "global"
  },
  {
    "name": "showbreak",
    "desc": "string to use at the start of wrapped lines",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "showcmd",
    "desc": "show (partial) command in status line",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "showfulltag",
    "desc": "show full tag pattern when completing tag",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "showmatch",
    "desc": "briefly jump to matching bracket if insert one",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "showmode",
    "desc": "message on status line to show current mode",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "showtabline",
    "desc": "tells when the tab pages line is displayed",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "sidescroll",
    "desc": "minimum number of columns to scroll horizontal",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "sidescrolloff",
    "desc": "min. nr. of columns to left and right of cursor",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "signcolumn",
    "desc": "when to display the sign column",
    "type": "string",
    "list": "",
    "scope": "window"
  },
  {
    "name": "smartcase",
    "desc": "no ignore case when pattern has uppercase",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "smartindent",
    "desc": "smart autoindenting for C programs",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "smarttab",
    "desc": "use 'shiftwidth' when inserting \u003cTab\u003e",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "softtabstop",
    "desc": "number of spaces that \u003cTab\u003e uses while editing",
    "type": "number",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "spell",
    "desc": "spell checking",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "spellcapcheck",
    "desc": "pattern to locate end of a sentence",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "spellfile",
    "desc": "files where |zg| and |zw| store words",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "spelllang",
    "desc": "language(s) to do spell checking for",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "spellsuggest",
    "desc": "method(s) used to suggest spelling corrections",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "spelloptions",
    "desc": "",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "splitbelow",
    "desc": "new window from split is below the current one",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "splitright",
    "desc": "new window is put right of the current one",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "startofline",
    "desc": "commands move cursor to first non-blank in line",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "statusline",
    "desc": "custom format for the status line",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "suffixes",
    "desc": "suffixes that are ignored with multiple match",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "suffixesadd",
    "desc": "suffixes added when searching for a file",
    "type": "string",
    "list": "onecomma",
    "scope": "buffer"
  },
  {
    "name": "swapfile",
    "desc": "whether to use a swapfile for a buffer",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "switchbuf",
    "desc": "sets behavior when switching to another buffer",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "synmaxcol",
    "desc": "maximum column to find syntax items",
    "type": "number",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "syntax",
    "desc": "syntax to be loaded for current buffer",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "tagfunc",
    "desc": "function used to perform tag searches",
    "type": "string",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "tabline",
    "desc": "custom format for the console tab pages line",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "tabpagemax",
    "desc": "maximum number of tab pages for |-p| and \\",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "tabstop",
    "desc": "number of spaces that \u003cTab\u003e in file uses",
    "type": "number",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "tagbsearch",
    "desc": "use binary searching in tags files",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "tagcase",
    "desc": "how to handle case when searching in tags files",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "taglength",
    "desc": "number of significant characters for a tag",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "tagrelative",
    "desc": "file names in tag file are relative",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "tags",
    "desc": "list of file names used by the tag command",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "tagstack",
    "desc": "push tags onto the tag stack",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "termbidi",
    "desc": "terminal takes care of bi-directionality",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "termencoding",
    "desc": "Terminal encodig",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "termguicolors",
    "desc": "Terminal true color support",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "termpastefilter",
    "desc": "",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "terse",
    "desc": "hides notification of search wrap",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "textwidth",
    "desc": "maximum width of text that is being inserted",
    "type": "number",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "thesaurus",
    "desc": "list of thesaurus files for keyword completion",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "tildeop",
    "desc": "tilde command \\",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "timeout",
    "desc": "time out on mappings and key codes",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "timeoutlen",
    "desc": "time out time in milliseconds",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "title",
    "desc": "Vim set the title of the window",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "titlelen",
    "desc": "of 'columns' used for window title",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "titleold",
    "desc": "title, restored when exiting",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "titlestring",
    "desc": "to use for the Vim window title",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "ttimeout",
    "desc": "out on mappings",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "ttimeoutlen",
    "desc": "time out time for key codes in milliseconds",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "ttyfast",
    "desc": "No description",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "undodir",
    "desc": "where to store undo files",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "undofile",
    "desc": "save undo information in a file",
    "type": "bool",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "undolevels",
    "desc": "maximum number of changes that can be undone",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "undoreload",
    "desc": "max nr of lines to save for undo on a buffer reload",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "updatecount",
    "desc": "after this many characters flush swap file",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "updatetime",
    "desc": "after this many milliseconds flush swap file",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "verbose",
    "desc": "give informative messages",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "verbosefile",
    "desc": "file to write messages in",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "viewdir",
    "desc": "directory where to store files with :mkview",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "viewoptions",
    "desc": "specifies what to save for :mkview",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "viminfo",
    "desc": "Alias for shada",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "viminfofile",
    "desc": "Alias for shadafile instead",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "virtualedit",
    "desc": "when to use virtual editing",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "visualbell",
    "desc": "use visual bell instead of beeping",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "warn",
    "desc": "for shell command when buffer was changed",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "whichwrap",
    "desc": "allow specified keys to cross line boundaries",
    "type": "string",
    "list": "flagscomma",
    "scope": "global"
  },
  {
    "name": "wildchar",
    "desc": "command-line character for wildcard expansion",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "wildcharm",
    "desc": "like 'wildchar' but also works when mapped",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "wildignore",
    "desc": "files matching these patterns are not completed",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "wildignorecase",
    "desc": "ignore case when completing file names",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "wildmenu",
    "desc": "use menu for command line completion",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "wildmode",
    "desc": "mode for 'wildchar' command-line expansion",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "wildoptions",
    "desc": "specifies how command line completion is done",
    "type": "string",
    "list": "onecomma",
    "scope": "global"
  },
  {
    "name": "winaltkeys",
    "desc": "when the windows system handles ALT keys",
    "type": "string",
    "list": "",
    "scope": "global"
  },
  {
    "name": "winblend",
    "desc": "Controls transparency level for floating windows",
    "type": "number",
    "list": "",
    "scope": "window"
  },
  {
    "name": "winhighlight",
    "desc": "Setup window-local highlights",
    "type": "string",
    "list": "",
    "scope": "window"
  },
  {
    "name": "window",
    "desc": "nr of lines to scroll for CTRL-F and CTRL-B",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "winheight",
    "desc": "minimum number of lines for the current window",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "winfixheight",
    "desc": "keep window height when opening/closing windows",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "winfixwidth",
    "desc": "keep window width when opening/closing windows",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "winminheight",
    "desc": "minimum number of lines for any window",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "winminwidth",
    "desc": "minimal number of columns for any window",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "winwidth",
    "desc": "minimal number of columns for current window",
    "type": "number",
    "list": "",
    "scope": "global"
  },
  {
    "name": "wrap",
    "desc": "lines wrap and continue on the next line",
    "type": "bool",
    "list": "",
    "scope": "window"
  },
  {
    "name": "wrapmargin",
    "desc": "chars from the right where wrapping starts",
    "type": "number",
    "list": "",
    "scope": "buffer"
  },
  {
    "name": "wrapscan",
    "desc": "searches wrap around the end of the file",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "write",
    "desc": "to a file is allowed",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "writeany",
    "desc": "write to file with no need for \\",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "writebackup",
    "desc": "make a backup before overwriting a file",
    "type": "bool",
    "list": "",
    "scope": "global"
  },
  {
    "name": "writedelay",
    "desc": "delay this many msec for each char (for debug)",
    "type": "number",
    "list": "",
    "scope": "global"
  }
]
